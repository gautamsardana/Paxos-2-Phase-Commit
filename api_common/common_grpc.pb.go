// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: common.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Paxos2PC_UpdateServerState_FullMethodName = "/common.Paxos2PC/UpdateServerState"
	Paxos2PC_Callback_FullMethodName          = "/common.Paxos2PC/Callback"
	Paxos2PC_EnqueueTxn_FullMethodName        = "/common.Paxos2PC/EnqueueTxn"
	Paxos2PC_ProcessTxnSet_FullMethodName     = "/common.Paxos2PC/ProcessTxnSet"
	Paxos2PC_Prepare_FullMethodName           = "/common.Paxos2PC/Prepare"
	Paxos2PC_Accept_FullMethodName            = "/common.Paxos2PC/Accept"
	Paxos2PC_Commit_FullMethodName            = "/common.Paxos2PC/Commit"
	Paxos2PC_SyncRequest_FullMethodName       = "/common.Paxos2PC/SyncRequest"
	Paxos2PC_TwoPCCommit_FullMethodName       = "/common.Paxos2PC/TwoPCCommit"
	Paxos2PC_TwoPCAbort_FullMethodName        = "/common.Paxos2PC/TwoPCAbort"
	Paxos2PC_Performance_FullMethodName       = "/common.Paxos2PC/Performance"
	Paxos2PC_PrintBalance_FullMethodName      = "/common.Paxos2PC/PrintBalance"
	Paxos2PC_PrintDB_FullMethodName           = "/common.Paxos2PC/PrintDB"
)

// Paxos2PCClient is the client API for Paxos2PC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Paxos2PCClient interface {
	UpdateServerState(ctx context.Context, in *UpdateServerStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Callback(ctx context.Context, in *ProcessTxnResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnqueueTxn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProcessTxnSet(ctx context.Context, in *TxnSet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Prepare(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*Promise, error)
	Accept(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonRequest, error)
	Commit(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncRequest(ctx context.Context, in *Sync, opts ...grpc.CallOption) (*Sync, error)
	TwoPCCommit(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*ProcessTxnResponse, error)
	TwoPCAbort(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*ProcessTxnResponse, error)
	Performance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerformanceResponse, error)
	PrintBalance(ctx context.Context, in *PrintBalanceRequest, opts ...grpc.CallOption) (*PrintBalanceResponse, error)
	PrintDB(ctx context.Context, in *PrintDBRequest, opts ...grpc.CallOption) (*PrintDBResponse, error)
}

type paxos2PCClient struct {
	cc grpc.ClientConnInterface
}

func NewPaxos2PCClient(cc grpc.ClientConnInterface) Paxos2PCClient {
	return &paxos2PCClient{cc}
}

func (c *paxos2PCClient) UpdateServerState(ctx context.Context, in *UpdateServerStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos2PC_UpdateServerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) Callback(ctx context.Context, in *ProcessTxnResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos2PC_Callback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) EnqueueTxn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos2PC_EnqueueTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) ProcessTxnSet(ctx context.Context, in *TxnSet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos2PC_ProcessTxnSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) Prepare(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*Promise, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Promise)
	err := c.cc.Invoke(ctx, Paxos2PC_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) Accept(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*CommonRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonRequest)
	err := c.cc.Invoke(ctx, Paxos2PC_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) Commit(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Paxos2PC_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) SyncRequest(ctx context.Context, in *Sync, opts ...grpc.CallOption) (*Sync, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Sync)
	err := c.cc.Invoke(ctx, Paxos2PC_SyncRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) TwoPCCommit(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*ProcessTxnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessTxnResponse)
	err := c.cc.Invoke(ctx, Paxos2PC_TwoPCCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) TwoPCAbort(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*ProcessTxnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessTxnResponse)
	err := c.cc.Invoke(ctx, Paxos2PC_TwoPCAbort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) Performance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceResponse)
	err := c.cc.Invoke(ctx, Paxos2PC_Performance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) PrintBalance(ctx context.Context, in *PrintBalanceRequest, opts ...grpc.CallOption) (*PrintBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintBalanceResponse)
	err := c.cc.Invoke(ctx, Paxos2PC_PrintBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxos2PCClient) PrintDB(ctx context.Context, in *PrintDBRequest, opts ...grpc.CallOption) (*PrintDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintDBResponse)
	err := c.cc.Invoke(ctx, Paxos2PC_PrintDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Paxos2PCServer is the server API for Paxos2PC service.
// All implementations must embed UnimplementedPaxos2PCServer
// for forward compatibility.
type Paxos2PCServer interface {
	UpdateServerState(context.Context, *UpdateServerStateRequest) (*emptypb.Empty, error)
	Callback(context.Context, *ProcessTxnResponse) (*emptypb.Empty, error)
	EnqueueTxn(context.Context, *TxnRequest) (*emptypb.Empty, error)
	ProcessTxnSet(context.Context, *TxnSet) (*emptypb.Empty, error)
	Prepare(context.Context, *CommonRequest) (*Promise, error)
	Accept(context.Context, *CommonRequest) (*CommonRequest, error)
	Commit(context.Context, *CommonRequest) (*emptypb.Empty, error)
	SyncRequest(context.Context, *Sync) (*Sync, error)
	TwoPCCommit(context.Context, *TxnRequest) (*ProcessTxnResponse, error)
	TwoPCAbort(context.Context, *TxnRequest) (*ProcessTxnResponse, error)
	Performance(context.Context, *emptypb.Empty) (*PerformanceResponse, error)
	PrintBalance(context.Context, *PrintBalanceRequest) (*PrintBalanceResponse, error)
	PrintDB(context.Context, *PrintDBRequest) (*PrintDBResponse, error)
	mustEmbedUnimplementedPaxos2PCServer()
}

// UnimplementedPaxos2PCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaxos2PCServer struct{}

func (UnimplementedPaxos2PCServer) UpdateServerState(context.Context, *UpdateServerStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerState not implemented")
}
func (UnimplementedPaxos2PCServer) Callback(context.Context, *ProcessTxnResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedPaxos2PCServer) EnqueueTxn(context.Context, *TxnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueTxn not implemented")
}
func (UnimplementedPaxos2PCServer) ProcessTxnSet(context.Context, *TxnSet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTxnSet not implemented")
}
func (UnimplementedPaxos2PCServer) Prepare(context.Context, *CommonRequest) (*Promise, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPaxos2PCServer) Accept(context.Context, *CommonRequest) (*CommonRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPaxos2PCServer) Commit(context.Context, *CommonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPaxos2PCServer) SyncRequest(context.Context, *Sync) (*Sync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRequest not implemented")
}
func (UnimplementedPaxos2PCServer) TwoPCCommit(context.Context, *TxnRequest) (*ProcessTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwoPCCommit not implemented")
}
func (UnimplementedPaxos2PCServer) TwoPCAbort(context.Context, *TxnRequest) (*ProcessTxnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwoPCAbort not implemented")
}
func (UnimplementedPaxos2PCServer) Performance(context.Context, *emptypb.Empty) (*PerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Performance not implemented")
}
func (UnimplementedPaxos2PCServer) PrintBalance(context.Context, *PrintBalanceRequest) (*PrintBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintBalance not implemented")
}
func (UnimplementedPaxos2PCServer) PrintDB(context.Context, *PrintDBRequest) (*PrintDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintDB not implemented")
}
func (UnimplementedPaxos2PCServer) mustEmbedUnimplementedPaxos2PCServer() {}
func (UnimplementedPaxos2PCServer) testEmbeddedByValue()                  {}

// UnsafePaxos2PCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Paxos2PCServer will
// result in compilation errors.
type UnsafePaxos2PCServer interface {
	mustEmbedUnimplementedPaxos2PCServer()
}

func RegisterPaxos2PCServer(s grpc.ServiceRegistrar, srv Paxos2PCServer) {
	// If the following call pancis, it indicates UnimplementedPaxos2PCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Paxos2PC_ServiceDesc, srv)
}

func _Paxos2PC_UpdateServerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).UpdateServerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_UpdateServerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).UpdateServerState(ctx, req.(*UpdateServerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTxnResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).Callback(ctx, req.(*ProcessTxnResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_EnqueueTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).EnqueueTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_EnqueueTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).EnqueueTxn(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_ProcessTxnSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).ProcessTxnSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_ProcessTxnSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).ProcessTxnSet(ctx, req.(*TxnSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).Prepare(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).Accept(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).Commit(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_SyncRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).SyncRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_SyncRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).SyncRequest(ctx, req.(*Sync))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_TwoPCCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).TwoPCCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_TwoPCCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).TwoPCCommit(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_TwoPCAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).TwoPCAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_TwoPCAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).TwoPCAbort(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_Performance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).Performance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_Performance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).Performance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_PrintBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).PrintBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_PrintBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).PrintBalance(ctx, req.(*PrintBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos2PC_PrintDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Paxos2PCServer).PrintDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paxos2PC_PrintDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Paxos2PCServer).PrintDB(ctx, req.(*PrintDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Paxos2PC_ServiceDesc is the grpc.ServiceDesc for Paxos2PC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paxos2PC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.Paxos2PC",
	HandlerType: (*Paxos2PCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServerState",
			Handler:    _Paxos2PC_UpdateServerState_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _Paxos2PC_Callback_Handler,
		},
		{
			MethodName: "EnqueueTxn",
			Handler:    _Paxos2PC_EnqueueTxn_Handler,
		},
		{
			MethodName: "ProcessTxnSet",
			Handler:    _Paxos2PC_ProcessTxnSet_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Paxos2PC_Prepare_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Paxos2PC_Accept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Paxos2PC_Commit_Handler,
		},
		{
			MethodName: "SyncRequest",
			Handler:    _Paxos2PC_SyncRequest_Handler,
		},
		{
			MethodName: "TwoPCCommit",
			Handler:    _Paxos2PC_TwoPCCommit_Handler,
		},
		{
			MethodName: "TwoPCAbort",
			Handler:    _Paxos2PC_TwoPCAbort_Handler,
		},
		{
			MethodName: "Performance",
			Handler:    _Paxos2PC_Performance_Handler,
		},
		{
			MethodName: "PrintBalance",
			Handler:    _Paxos2PC_PrintBalance_Handler,
		},
		{
			MethodName: "PrintDB",
			Handler:    _Paxos2PC_PrintDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}
